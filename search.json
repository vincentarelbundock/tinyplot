[
  {
    "objectID": "man/tinyplot.html",
    "href": "man/tinyplot.html",
    "title": "tinyplot",
    "section": "",
    "text": "Enhances the base plot function. Supported features include automatic legends and facets for grouped data, additional plot types, theme customization, and so on. Users can call either tinyplot(), or its shorthand alias plt().\n\n\n\ntinyplot(x, ...)\n\n## Default S3 method:\ntinyplot(\n  x = NULL,\n  y = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  log = \"\",\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  palette = NULL,\n  legend = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  alpha = NULL,\n  cex = 1,\n  restore.par = FALSE,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  ribbon.alpha = NULL,\n  add = FALSE,\n  file = NULL,\n  width = NULL,\n  height = NULL,\n  empty = FALSE,\n  xaxt = NULL,\n  yaxt = NULL,\n  ...\n)\n\n## S3 method for class 'formula'\ntinyplot(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  restore.par = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\nplt(x, ...)\n\n## S3 method for class 'density'\ntinyplot(\n  x = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  type = c(\"l\", \"area\"),\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  bg = NULL,\n  fill = NULL,\n  restore.par = FALSE,\n  ...\n)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‘Examples’ section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n…\n\n\nother graphical parameters (see par), or arguments passed to the relevant plot type (e.g., breaks for type = “histogram”, or varwidth for type = “boxplot”).\n\n\n\n\nby\n\n\ngrouping variable(s). The default behaviour is for groups to be represented in the form of distinct colours, which will also trigger an automatic legend. (See legend below for customization options.) However, groups can also be presented through other plot parameters (e.g., pch or lty) by passing an appropriate \"by\" keyword; see Examples. Note that continuous (i.e., gradient) colour legends are also supported if the user passes a numeric or integer to by. To group by multiple variables, wrap them with interaction.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g. facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g. facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g. ~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, …) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g. facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don’t recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special “by” convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of tpar(“fmar”), which should be c(1,1,1,1), i.e. a single line of padding around each individual facet, assuming it hasn’t been overridden by the user as part their global tpar settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See tpar for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from tpar (where they take a \"facet.\" prefix, e.g. tpar(“facet.cex”)). The latter function can also be used to set these features globally for all tinyplot plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string giving the type of plot desired. If no argument is provided, then the plot type will default to something sensible for the type of x and y inputs (i.e., usually “p”). Options are:\n\n\nThe same set of 1-character values supported by plot: “p” for points, “l” for lines, “b” for both points and lines, “c” for empty points joined by lines, “o” for overplotted points and lines, “s” and “S” for stair steps, and “h” for histogram-like vertical lines. Specifying “n” produces an empty plot over the extent of the data, but with no internal elements (see also the empty argument below).\n\n\nAdditional tinyplot types:\n\n\n“jitter” (alias “j”) for jittered points.\n\n\n“rect”, “segments”, “polygon”, or “polypath”, which are all equivalent to their base counterparts, but don’t require an existing plot window.\n\n\n“boxplot”, “histogram” (alias “hist”), or “density” for distribution plots.\n\n\n“pointrange” or “errorbar” for segment intervals, and “ribbon” or “area” for polygon intervals (where area plots are a special case of ribbon plots with ymin set to 0 and ymax set to y; see below).\n\n\n\n\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‘reversed axis’. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\nlog\n\n\na character string which contains \"x\" if the x axis is to be logarithmic, \"y\" if the y axis is to be logarithmic and \"xy\" or \"yx\" if both axes are to be logarithmic.\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\naxes\n\n\nlogical or character. Should axes be drawn (TRUE or FALSE)? Or alternatively what type of axes should be drawn: “standard” (with axis, ticks, and labels; equivalent to TRUE), “none” (no axes; equivalent to FALSE), “ticks” (only ticks and labels without axis line), “labels” (only labels without ticks and axis line), “axis” (only axis line and labels but no ticks). To control this separately for the two axes, use the character specifications for xaxt and/or yaxt.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias. The default is to draw a frame if both axis types (set via axes, xaxt, or yaxt) include axis lines.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. The default behaviour is determined by (and can be set globally through) the value of tpar(“grid”).\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be chosen according to the class and cardinality of the \"by\" grouping variable. For non-ordered factors or strings with a reasonable number of groups, this will inherit directly from the user’s default palette (e.g., \"R4\"). In other cases, including ordered factors and high cardinality, the \"Viridis\" palette will be used instead. Note that a slightly restricted version of the \"Viridis\" palette—where extreme color values have been trimmed to improve visual perception—will be used for ordered factors and continuous variables. In the latter case of a continuous grouping variable, we also generate a gradient legend swatch.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = “Okabe-Ito”, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g. \"right\", \"topleft\", \"bottom\", etc. In addition, tinyplot supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g. \"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = “by” convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(“pch”)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = “by” convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(“lty”)) and recycle as necessary.\n\n\n\n\nlwd\n\n\nline width. Numeric scalar or vector of length equal to the number of categories in the by variable. See lwd. In addition, users can supply a special lwd = “by” convenience argument, in which case the line width will automatically loop over the number of groups. This automatic looping will be centered at the global line width value (i.e.,\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in tinyplot is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, lwd, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. For the latter group—including filled density plots—an automatic alpha transparency adjustment will be applied (see the ribbon.alpha argument further below). Users can also supply either one of two special convenience arguments that will cause the background fill to inherit the automatic grouped coloring behaviour of col:\n\n\nbg = “by” will insert a background fill that inherits the main color mappings from col.\n\n\nby = &lt;numeric[0,1]&gt; (i.e., a numeric in the range [0,1]) will insert a background fill that inherits the main color mapping(s) from col, but with added alpha-transparency.\n\n\nFor both of these convenience arguments, note that the (grouped) bg mappings will persist even if the (grouped) col defaults are themselves overridden. This can be useful if you want to preserve the grouped palette mappings by background fill but not boundary color, e.g. filled points. See examples.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\nalpha\n\n\na numeric in the range [0,1] for adjusting the alpha channel of the color palette, where 0 means transparent and 1 means opaque. Use fractional values, e.g. 0.5 for semi-transparency.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible.\n\n\n\n\nrestore.par\n\n\na logical value indicating whether the par settings prior to calling tinyplot should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the tinyplot legend. Users can opt out of this persistent behaviour by setting to TRUE instead. See also get_saved_par for another option to recover the original par settings, as well as longer discussion about the trade-offs involved.\n\n\n\n\nxmin, xmax, ymin, ymax\n\n\nminimum and maximum coordinates of relevant area or interval plot types. Only used when the type argument is one of “rect” or “segments” (where all four min-max coordinates are required), or “pointrange”, “errorbar”, or “ribbon” (where only ymin and ymax required alongside x).\n\n\n\n\nribbon.alpha\n\n\nnumeric factor modifying the opacity alpha of any ribbon shading; typically in [0, 1]. Only used when type = “ribbon”, or when the bg fill argument is specified in a density plot (since filled density plots are converted to ribbon plots internally). If an an applicable plot type is called but no explicit value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off.\n\n\n\n\nfile\n\n\ncharacter string giving the file path for writing a plot to disk. If specified, the plot will not be displayed interactively, but rather sent to the appropriate external graphics device (i.e., png, jpeg, pdf, or svg). As a point of convenience, note that any global parameters held in (t)par are automatically carried over to the external device and don’t need to be reset (in contrast to the conventional base R approach that requires manually opening and closing the device). The device type is determined by the file extension at the end of the provided path, and must be one of \".png\", \".jpg\" (\".jpeg\"), \".pdf\", or \".svg\". (Other file types may be supported in the future.) The file dimensions can be controlled by the corresponding width and height arguments below, otherwise will fall back to the “file.width” and “file.height” values held in tpar (i.e., both defaulting to 7 inches, and where the default resolution for bitmap files is also specified as 300 DPI).\n\n\n\n\nwidth\n\n\nnumeric giving the plot width in inches. Together with height, typically used in conjunction with the file argument above, overriding the default values held in tpar(“file.width”, “file.height”). If either width or height is specified, but a corresponding file argument is not provided as well, then a new interactive graphics device dimensions will be opened along the given dimensions. Note that this interactive resizing may not work consistently from within an IDE like RStudio that has an integrated graphics windows.\n\n\n\n\nheight\n\n\nnumeric giving the plot height in inches. Same considerations as width (above) apply, e.g. will default to tpar(“file.height”) if not specified.\n\n\n\n\nempty\n\n\nlogical indicating whether the interior plot region should be left empty. The default is FALSE. Setting to TRUE has a similar effect to invoking type = “n” above, except that any legend artifacts owing to a particular plot type (e.g., lines for type = “l” or squares for type = “area”) will still be drawn correctly alongside the empty plot. In contrast,type = “n” implicitly assumes a scatterplot and so any legend will only depict points.\n\n\n\n\nxaxt, yaxt\n\n\ncharacter specifying the type of x-axis and y-axis, respectively. See axes for the possible values.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g. y ~ x | z. One-sided formulae are also permitted, e.g. ~ y | z. Multiple grouping variables can be specified in different ways, e.g. y ~ x | z1:z2 or y ~ x | z1 + z2. (These two representations are treated as equivalent; both are parsed as interaction(z1, z2) internally.) Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\nDisregarding the enhancements that it supports, tinyplot tries as far as possible to mimic the behaviour and syntax logic of the original base plot function. Users should therefore be able to swap out existing plot calls for tinyplot (or its shorthand alias plt), without causing unexpected changes to the output.\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#' \naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\n# In most cases, `tinyplot` should be a drop-in replacement for regular\n# `plot` calls. For example:\n\nop = tpar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\ntpar(op) # restore original layout\n\n# Aside: `tinyplot::tpar()` is a (near) drop-in replacement for `par()`\n\n# Unlike vanilla plot, however, tinyplot allows you to characterize groups \n# using either the `by` argument or equivalent `|` formula syntax.\n\nwith(aq, tinyplot(Day, Temp, by = Month)) ## atomic method\n\n\n\n\n\n\n\ntinyplot(Temp ~ Day | Month, data = aq)   ## formula method\n\n# (Notice that we also get an automatic legend.)\n\n# You can also use the equivalent shorthand `plt()` alias if you'd like to\n# save on a few keystrokes\n\nplt(Temp ~ Day | Month, data = aq) ## shorthand alias\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points and `cex`\n# (character expansion) to increase their size.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n# We can add alpha transparency for overlapping points\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2,\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n# To get filled points with a common solid background color, use an \n# appropriate plotting character (21:25) and combine with one of the special\n# `bg` convenience arguments.\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21,     # use filled circles\n  cex = 2,\n  bg = 0.3,     # numeric in [0,1] adds a grouped background fill with transparency\n  col = \"black\" # override default color mapping; give all points a black border\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by tinyplot, e.g. density plots or internal plots (ribbons, \n# pointranges, etc.)\n\ntinyplot(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\ntinyplot(\n  Temp ~ Day,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~ Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\ntinyplot(\n Temp ~ Day,\n facet = windy ~ hot,\n data = aq\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `tinyplot` to place the legend _outside_ the plot\n# area.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to further customize the look of you plots using familiar\n# arguments and base plotting theme settings (e.g., via `(t)par`).\n\nop = tpar(family = \"HersheySans\", las = 1)\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\", pch = 16,\n  palette = \"tableau\", alpha = 0.5,\n  main = \"Daily temperatures by month\",\n  frame = FALSE, grid = TRUE\n)\n\n\n\n\n\n\n\ntpar(op) # restore original graphics parameters\n\n# Note: For more examples and a detailed walkthrough, please see the\n# introductory tinyplot tutorial available online:\n# https://grantmcdermott.com/tinyplot/vignettes/intro_tutorial.html",
    "crumbs": [
      "Reference",
      "tinyplot"
    ]
  },
  {
    "objectID": "man/tinyplot.html#lightweight-extension-of-the-base-r-plotting-function",
    "href": "man/tinyplot.html#lightweight-extension-of-the-base-r-plotting-function",
    "title": "tinyplot",
    "section": "",
    "text": "Enhances the base plot function. Supported features include automatic legends and facets for grouped data, additional plot types, theme customization, and so on. Users can call either tinyplot(), or its shorthand alias plt().\n\n\n\ntinyplot(x, ...)\n\n## Default S3 method:\ntinyplot(\n  x = NULL,\n  y = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  log = \"\",\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  palette = NULL,\n  legend = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  alpha = NULL,\n  cex = 1,\n  restore.par = FALSE,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  ribbon.alpha = NULL,\n  add = FALSE,\n  file = NULL,\n  width = NULL,\n  height = NULL,\n  empty = FALSE,\n  xaxt = NULL,\n  yaxt = NULL,\n  ...\n)\n\n## S3 method for class 'formula'\ntinyplot(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  restore.par = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\nplt(x, ...)\n\n## S3 method for class 'density'\ntinyplot(\n  x = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  type = c(\"l\", \"area\"),\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  bg = NULL,\n  fill = NULL,\n  restore.par = FALSE,\n  ...\n)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‘Examples’ section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n…\n\n\nother graphical parameters (see par), or arguments passed to the relevant plot type (e.g., breaks for type = “histogram”, or varwidth for type = “boxplot”).\n\n\n\n\nby\n\n\ngrouping variable(s). The default behaviour is for groups to be represented in the form of distinct colours, which will also trigger an automatic legend. (See legend below for customization options.) However, groups can also be presented through other plot parameters (e.g., pch or lty) by passing an appropriate \"by\" keyword; see Examples. Note that continuous (i.e., gradient) colour legends are also supported if the user passes a numeric or integer to by. To group by multiple variables, wrap them with interaction.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g. facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g. facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g. ~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, …) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g. facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don’t recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special “by” convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of tpar(“fmar”), which should be c(1,1,1,1), i.e. a single line of padding around each individual facet, assuming it hasn’t been overridden by the user as part their global tpar settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See tpar for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from tpar (where they take a \"facet.\" prefix, e.g. tpar(“facet.cex”)). The latter function can also be used to set these features globally for all tinyplot plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string giving the type of plot desired. If no argument is provided, then the plot type will default to something sensible for the type of x and y inputs (i.e., usually “p”). Options are:\n\n\nThe same set of 1-character values supported by plot: “p” for points, “l” for lines, “b” for both points and lines, “c” for empty points joined by lines, “o” for overplotted points and lines, “s” and “S” for stair steps, and “h” for histogram-like vertical lines. Specifying “n” produces an empty plot over the extent of the data, but with no internal elements (see also the empty argument below).\n\n\nAdditional tinyplot types:\n\n\n“jitter” (alias “j”) for jittered points.\n\n\n“rect”, “segments”, “polygon”, or “polypath”, which are all equivalent to their base counterparts, but don’t require an existing plot window.\n\n\n“boxplot”, “histogram” (alias “hist”), or “density” for distribution plots.\n\n\n“pointrange” or “errorbar” for segment intervals, and “ribbon” or “area” for polygon intervals (where area plots are a special case of ribbon plots with ymin set to 0 and ymax set to y; see below).\n\n\n\n\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‘reversed axis’. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\nlog\n\n\na character string which contains \"x\" if the x axis is to be logarithmic, \"y\" if the y axis is to be logarithmic and \"xy\" or \"yx\" if both axes are to be logarithmic.\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\naxes\n\n\nlogical or character. Should axes be drawn (TRUE or FALSE)? Or alternatively what type of axes should be drawn: “standard” (with axis, ticks, and labels; equivalent to TRUE), “none” (no axes; equivalent to FALSE), “ticks” (only ticks and labels without axis line), “labels” (only labels without ticks and axis line), “axis” (only axis line and labels but no ticks). To control this separately for the two axes, use the character specifications for xaxt and/or yaxt.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias. The default is to draw a frame if both axis types (set via axes, xaxt, or yaxt) include axis lines.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. The default behaviour is determined by (and can be set globally through) the value of tpar(“grid”).\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be chosen according to the class and cardinality of the \"by\" grouping variable. For non-ordered factors or strings with a reasonable number of groups, this will inherit directly from the user’s default palette (e.g., \"R4\"). In other cases, including ordered factors and high cardinality, the \"Viridis\" palette will be used instead. Note that a slightly restricted version of the \"Viridis\" palette—where extreme color values have been trimmed to improve visual perception—will be used for ordered factors and continuous variables. In the latter case of a continuous grouping variable, we also generate a gradient legend swatch.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = “Okabe-Ito”, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g. \"right\", \"topleft\", \"bottom\", etc. In addition, tinyplot supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g. \"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = “by” convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(“pch”)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = “by” convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(“lty”)) and recycle as necessary.\n\n\n\n\nlwd\n\n\nline width. Numeric scalar or vector of length equal to the number of categories in the by variable. See lwd. In addition, users can supply a special lwd = “by” convenience argument, in which case the line width will automatically loop over the number of groups. This automatic looping will be centered at the global line width value (i.e.,\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in tinyplot is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, lwd, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. For the latter group—including filled density plots—an automatic alpha transparency adjustment will be applied (see the ribbon.alpha argument further below). Users can also supply either one of two special convenience arguments that will cause the background fill to inherit the automatic grouped coloring behaviour of col:\n\n\nbg = “by” will insert a background fill that inherits the main color mappings from col.\n\n\nby = &lt;numeric[0,1]&gt; (i.e., a numeric in the range [0,1]) will insert a background fill that inherits the main color mapping(s) from col, but with added alpha-transparency.\n\n\nFor both of these convenience arguments, note that the (grouped) bg mappings will persist even if the (grouped) col defaults are themselves overridden. This can be useful if you want to preserve the grouped palette mappings by background fill but not boundary color, e.g. filled points. See examples.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\nalpha\n\n\na numeric in the range [0,1] for adjusting the alpha channel of the color palette, where 0 means transparent and 1 means opaque. Use fractional values, e.g. 0.5 for semi-transparency.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible.\n\n\n\n\nrestore.par\n\n\na logical value indicating whether the par settings prior to calling tinyplot should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the tinyplot legend. Users can opt out of this persistent behaviour by setting to TRUE instead. See also get_saved_par for another option to recover the original par settings, as well as longer discussion about the trade-offs involved.\n\n\n\n\nxmin, xmax, ymin, ymax\n\n\nminimum and maximum coordinates of relevant area or interval plot types. Only used when the type argument is one of “rect” or “segments” (where all four min-max coordinates are required), or “pointrange”, “errorbar”, or “ribbon” (where only ymin and ymax required alongside x).\n\n\n\n\nribbon.alpha\n\n\nnumeric factor modifying the opacity alpha of any ribbon shading; typically in [0, 1]. Only used when type = “ribbon”, or when the bg fill argument is specified in a density plot (since filled density plots are converted to ribbon plots internally). If an an applicable plot type is called but no explicit value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off.\n\n\n\n\nfile\n\n\ncharacter string giving the file path for writing a plot to disk. If specified, the plot will not be displayed interactively, but rather sent to the appropriate external graphics device (i.e., png, jpeg, pdf, or svg). As a point of convenience, note that any global parameters held in (t)par are automatically carried over to the external device and don’t need to be reset (in contrast to the conventional base R approach that requires manually opening and closing the device). The device type is determined by the file extension at the end of the provided path, and must be one of \".png\", \".jpg\" (\".jpeg\"), \".pdf\", or \".svg\". (Other file types may be supported in the future.) The file dimensions can be controlled by the corresponding width and height arguments below, otherwise will fall back to the “file.width” and “file.height” values held in tpar (i.e., both defaulting to 7 inches, and where the default resolution for bitmap files is also specified as 300 DPI).\n\n\n\n\nwidth\n\n\nnumeric giving the plot width in inches. Together with height, typically used in conjunction with the file argument above, overriding the default values held in tpar(“file.width”, “file.height”). If either width or height is specified, but a corresponding file argument is not provided as well, then a new interactive graphics device dimensions will be opened along the given dimensions. Note that this interactive resizing may not work consistently from within an IDE like RStudio that has an integrated graphics windows.\n\n\n\n\nheight\n\n\nnumeric giving the plot height in inches. Same considerations as width (above) apply, e.g. will default to tpar(“file.height”) if not specified.\n\n\n\n\nempty\n\n\nlogical indicating whether the interior plot region should be left empty. The default is FALSE. Setting to TRUE has a similar effect to invoking type = “n” above, except that any legend artifacts owing to a particular plot type (e.g., lines for type = “l” or squares for type = “area”) will still be drawn correctly alongside the empty plot. In contrast,type = “n” implicitly assumes a scatterplot and so any legend will only depict points.\n\n\n\n\nxaxt, yaxt\n\n\ncharacter specifying the type of x-axis and y-axis, respectively. See axes for the possible values.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g. y ~ x | z. One-sided formulae are also permitted, e.g. ~ y | z. Multiple grouping variables can be specified in different ways, e.g. y ~ x | z1:z2 or y ~ x | z1 + z2. (These two representations are treated as equivalent; both are parsed as interaction(z1, z2) internally.) Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\nDisregarding the enhancements that it supports, tinyplot tries as far as possible to mimic the behaviour and syntax logic of the original base plot function. Users should therefore be able to swap out existing plot calls for tinyplot (or its shorthand alias plt), without causing unexpected changes to the output.\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#' \naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\n# In most cases, `tinyplot` should be a drop-in replacement for regular\n# `plot` calls. For example:\n\nop = tpar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\ntpar(op) # restore original layout\n\n# Aside: `tinyplot::tpar()` is a (near) drop-in replacement for `par()`\n\n# Unlike vanilla plot, however, tinyplot allows you to characterize groups \n# using either the `by` argument or equivalent `|` formula syntax.\n\nwith(aq, tinyplot(Day, Temp, by = Month)) ## atomic method\n\n\n\n\n\n\n\ntinyplot(Temp ~ Day | Month, data = aq)   ## formula method\n\n# (Notice that we also get an automatic legend.)\n\n# You can also use the equivalent shorthand `plt()` alias if you'd like to\n# save on a few keystrokes\n\nplt(Temp ~ Day | Month, data = aq) ## shorthand alias\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points and `cex`\n# (character expansion) to increase their size.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n# We can add alpha transparency for overlapping points\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2,\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n# To get filled points with a common solid background color, use an \n# appropriate plotting character (21:25) and combine with one of the special\n# `bg` convenience arguments.\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21,     # use filled circles\n  cex = 2,\n  bg = 0.3,     # numeric in [0,1] adds a grouped background fill with transparency\n  col = \"black\" # override default color mapping; give all points a black border\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by tinyplot, e.g. density plots or internal plots (ribbons, \n# pointranges, etc.)\n\ntinyplot(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\ntinyplot(\n  Temp ~ Day,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~ Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\ntinyplot(\n Temp ~ Day,\n facet = windy ~ hot,\n data = aq\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `tinyplot` to place the legend _outside_ the plot\n# area.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to further customize the look of you plots using familiar\n# arguments and base plotting theme settings (e.g., via `(t)par`).\n\nop = tpar(family = \"HersheySans\", las = 1)\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\", pch = 16,\n  palette = \"tableau\", alpha = 0.5,\n  main = \"Daily temperatures by month\",\n  frame = FALSE, grid = TRUE\n)\n\n\n\n\n\n\n\ntpar(op) # restore original graphics parameters\n\n# Note: For more examples and a detailed walkthrough, please see the\n# introductory tinyplot tutorial available online:\n# https://grantmcdermott.com/tinyplot/vignettes/intro_tutorial.html",
    "crumbs": [
      "Reference",
      "tinyplot"
    ]
  },
  {
    "objectID": "man/tpar.html",
    "href": "man/tpar.html",
    "title": "tinyplot",
    "section": "",
    "text": "Extends par, serving as a (near) drop-in replacement for setting or querying graphical parameters. The key differences is that, beyond supporting the standard group of R graphical parameters in par, tpar also supports additional graphical parameters that are provided by tinyplot. Similar to par, parameters are set by passing appropriate key = value argument pairs, and multiple parameters can be set or queried at the same time.\n\n\n\ntpar(...)\n\n\n\n\n\n\n\n…\n\n\narguments of the form key = value. This includes all of the parameters typically supported by par, as well as the tinyplot-specific ones described in the ‘Graphical Parameters’ section below.\n\n\n\n\n\n\nThe tinyplot-specific parameters are saved in an internal environment called .tpar for performance and safety reasons. However, they can also be set at package load time via options, which may prove convenient for users that want to enable different default behaviour at startup (e.g., through an .Rprofile file). These options all take a tinyplot_* prefix, e.g. options(tinyplot_grid = TRUE, tinyplot_facet.bg = “grey90”).\nFor their part, any \"base\" graphical parameters are caught dynamically and passed on to par as appropriate. Technically, only parameters that satisfy par(…, no.readonly = TRUE) are evaluated.\nHowever, note the important distinction: tpar only evaluates parameters from par if they are passed explicitly by the user. This means that tpar should not be used to capture the (invisible) state of a user’s entire set of graphics parameters, i.e. tpar() != par(). If you want to capture the all existing graphics settings, then you should rather use par() instead.\n\n\n\nWhen parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to tpar to restore the parameter values.\nWhen just one parameter is queried, the value of that parameter is returned as (atomic) vector. When two or more parameters are queried, their values are returned in a list, with the list names giving the parameters.\nNote the inconsistency: setting one parameter returns a list, but querying one parameter returns a vector.\n\n\n\n\n\n\nfacet.cex\n\n\n\n\nExpansion factor for facet titles. Defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.font\n\n\n\n\nAn integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.col\n\n\n\n\nCharacter or integer specifying the facet text colour. If an integer, will correspond to the user’s default global colour palette (see palette). Defaults to NULL, which is equivalent to “black”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.bg\n\n\n\n\nCharacter or integer specifying the facet background colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed rect. Defaults to NULL (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.border\n\n\n\n\nCharacter or integer specifying the facet border colour. If an integer, will correspond to the users default colour palette (see palette). Passed rect. Defaults to NA (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.height\n\n\n\n\nNumeric specifying the height (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.width\n\n\n\n\nNumeric specifying the width (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.res\n\n\n\n\nNumeric specifying the resolution (in dots per square inch) of any plot that is written to disk in bitmap format (i.e., PNG or JPEG) using the tinyplot(…, file = X) argument. Defaults to 300.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfmar\n\n\n\n\nA numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1), i.e. a single line of padding around each facet. If more that three facets are detected, the fmar parameter is scaled by 0.75 (i.e., three-quarters) to reduce the excess whitespace that would otherwise arise due to the absent axes lines and labels. (An exception is made for 2x2 plots to better match the cex expansion logic of the base graphics system under this particular layout.) Similarly, note that an extra 0.5 lines is subtracted from each side of the facet padding for plots that aren’t framed, to reduce excess whitespace.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrid\n\n\n\n\nLogical indicating whether a background panel grid should be added to plots automatically. Defaults to NULL, which is equivalent to FALSE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlmar\n\n\n\n\nA numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic tinyplot legend. Defaults to c(1.0, 0.1), where the first number represents the “inner” margin between the legend and the plot region, and the second number represents the “outer” margin between the legend and edge of the graphics device. (Note that an exception for the definition of the “outer” legend margin occurs when the legend placement is “top!”, since the legend is placed above the plot region but below the main title. In such cases, the outer margin is relative to the existing gap between the title and the plot region, which is itself determined by par(“mar”)[3].)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nribbon.alpha\n\n\n\n\nNumeric factor in the range [0,1] for modifying the opacity alpha of “ribbon” and “area” (and alike) type plots. Default value is 0.2.\n\n\n\n\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Return a list of existing base and tinyplot graphic params\ntpar(\"las\", \"pch\", \"facet.bg\", \"facet.cex\", \"grid\")\n\n$las\n[1] 0\n\n$pch\n[1] 1\n\n$facet.bg\nNULL\n\n$facet.cex\n[1] 1\n\n$grid\n[1] FALSE\n\n# Simple facet plot with these default values\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Set params to something new. Similar to graphics::par(), note that we save\n# the existing values at the same time by assigning to an object.\nop = tpar(\n   las       = 1,\n   pch       = 2,\n   facet.bg  = \"grey90\",\n   facet.cex = 2,\n   grid      = TRUE\n)\n\n# Re-plot with these new params\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Reset back to original values\ntpar(op)\n\n# Important: tpar() only evalutes parameters that have been passed explicitly\n#   by the user. So it it should not be used to query and set (restore)\n#   parameters that weren't explicitly requested, i.e. tpar() != par().\n\n# Note: The tinyplot-specific parameters can also be be set via `options`\n#   with a `tinyplot_*` prefix, which can be convenient for enabling\n#   different default behaviour at startup time (e.g., via an .Rprofile\n#   file). Example:\n# options(tinyplot_grid = TRUE, tinyplot_facet.bg = \"grey90\")",
    "crumbs": [
      "Reference",
      "tpar"
    ]
  },
  {
    "objectID": "man/tpar.html#set-or-query-graphical-parameters",
    "href": "man/tpar.html#set-or-query-graphical-parameters",
    "title": "tinyplot",
    "section": "",
    "text": "Extends par, serving as a (near) drop-in replacement for setting or querying graphical parameters. The key differences is that, beyond supporting the standard group of R graphical parameters in par, tpar also supports additional graphical parameters that are provided by tinyplot. Similar to par, parameters are set by passing appropriate key = value argument pairs, and multiple parameters can be set or queried at the same time.\n\n\n\ntpar(...)\n\n\n\n\n\n\n\n…\n\n\narguments of the form key = value. This includes all of the parameters typically supported by par, as well as the tinyplot-specific ones described in the ‘Graphical Parameters’ section below.\n\n\n\n\n\n\nThe tinyplot-specific parameters are saved in an internal environment called .tpar for performance and safety reasons. However, they can also be set at package load time via options, which may prove convenient for users that want to enable different default behaviour at startup (e.g., through an .Rprofile file). These options all take a tinyplot_* prefix, e.g. options(tinyplot_grid = TRUE, tinyplot_facet.bg = “grey90”).\nFor their part, any \"base\" graphical parameters are caught dynamically and passed on to par as appropriate. Technically, only parameters that satisfy par(…, no.readonly = TRUE) are evaluated.\nHowever, note the important distinction: tpar only evaluates parameters from par if they are passed explicitly by the user. This means that tpar should not be used to capture the (invisible) state of a user’s entire set of graphics parameters, i.e. tpar() != par(). If you want to capture the all existing graphics settings, then you should rather use par() instead.\n\n\n\nWhen parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to tpar to restore the parameter values.\nWhen just one parameter is queried, the value of that parameter is returned as (atomic) vector. When two or more parameters are queried, their values are returned in a list, with the list names giving the parameters.\nNote the inconsistency: setting one parameter returns a list, but querying one parameter returns a vector.\n\n\n\n\n\n\nfacet.cex\n\n\n\n\nExpansion factor for facet titles. Defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.font\n\n\n\n\nAn integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.col\n\n\n\n\nCharacter or integer specifying the facet text colour. If an integer, will correspond to the user’s default global colour palette (see palette). Defaults to NULL, which is equivalent to “black”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.bg\n\n\n\n\nCharacter or integer specifying the facet background colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed rect. Defaults to NULL (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.border\n\n\n\n\nCharacter or integer specifying the facet border colour. If an integer, will correspond to the users default colour palette (see palette). Passed rect. Defaults to NA (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.height\n\n\n\n\nNumeric specifying the height (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.width\n\n\n\n\nNumeric specifying the width (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfile.res\n\n\n\n\nNumeric specifying the resolution (in dots per square inch) of any plot that is written to disk in bitmap format (i.e., PNG or JPEG) using the tinyplot(…, file = X) argument. Defaults to 300.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfmar\n\n\n\n\nA numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1), i.e. a single line of padding around each facet. If more that three facets are detected, the fmar parameter is scaled by 0.75 (i.e., three-quarters) to reduce the excess whitespace that would otherwise arise due to the absent axes lines and labels. (An exception is made for 2x2 plots to better match the cex expansion logic of the base graphics system under this particular layout.) Similarly, note that an extra 0.5 lines is subtracted from each side of the facet padding for plots that aren’t framed, to reduce excess whitespace.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrid\n\n\n\n\nLogical indicating whether a background panel grid should be added to plots automatically. Defaults to NULL, which is equivalent to FALSE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlmar\n\n\n\n\nA numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic tinyplot legend. Defaults to c(1.0, 0.1), where the first number represents the “inner” margin between the legend and the plot region, and the second number represents the “outer” margin between the legend and edge of the graphics device. (Note that an exception for the definition of the “outer” legend margin occurs when the legend placement is “top!”, since the legend is placed above the plot region but below the main title. In such cases, the outer margin is relative to the existing gap between the title and the plot region, which is itself determined by par(“mar”)[3].)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nribbon.alpha\n\n\n\n\nNumeric factor in the range [0,1] for modifying the opacity alpha of “ribbon” and “area” (and alike) type plots. Default value is 0.2.\n\n\n\n\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Return a list of existing base and tinyplot graphic params\ntpar(\"las\", \"pch\", \"facet.bg\", \"facet.cex\", \"grid\")\n\n$las\n[1] 0\n\n$pch\n[1] 1\n\n$facet.bg\nNULL\n\n$facet.cex\n[1] 1\n\n$grid\n[1] FALSE\n\n# Simple facet plot with these default values\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Set params to something new. Similar to graphics::par(), note that we save\n# the existing values at the same time by assigning to an object.\nop = tpar(\n   las       = 1,\n   pch       = 2,\n   facet.bg  = \"grey90\",\n   facet.cex = 2,\n   grid      = TRUE\n)\n\n# Re-plot with these new params\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Reset back to original values\ntpar(op)\n\n# Important: tpar() only evalutes parameters that have been passed explicitly\n#   by the user. So it it should not be used to query and set (restore)\n#   parameters that weren't explicitly requested, i.e. tpar() != par().\n\n# Note: The tinyplot-specific parameters can also be be set via `options`\n#   with a `tinyplot_*` prefix, which can be convenient for enabling\n#   different default behaviour at startup time (e.g., via an .Rprofile\n#   file). Example:\n# options(tinyplot_grid = TRUE, tinyplot_facet.bg = \"grey90\")",
    "crumbs": [
      "Reference",
      "tpar"
    ]
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Apache License",
    "section": "",
    "text": "Apache License\nVersion 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;\n\nTerms and Conditions for use, reproduction, and distribution\n\n1. Definitions\n“License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n“You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.\n“Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n“Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n“Work” shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n“Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n“Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted” means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as “Not a Contribution.”\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n\n2. Grant of Copyright License\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n\n3. Grant of Patent License\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n\n4. Redistribution\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n(d) If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n\n5. Submission of Contributions\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n\n6. Trademarks\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n\n7. Disclaimer of Warranty\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n\n8. Limitation of Liability\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n\n9. Accepting Warranty or Additional Liability\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\n\n\n\nAPPENDIX: How to apply the Apache License to your work\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don’t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same “printed page” as the copyright notice for easier identification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tinyplot ",
    "section": "",
    "text": "A lightweight extension of the base R graphics system, with support for automatic grouping, legends, facets, and various other enhancements.\nThe stable version of tinyplot is available on CRAN.\ninstall.packages(\"tinyplot\")\nOr, you can grab the latest development version from R-universe.\ninstall.packages(\"tinyplot\", repos = \"https://grantmcdermott.r-universe.dev\")\n\n\n\nR users are spoiled for choice when it comes to visualization frameworks. The options, of course, include lattice and ggplot2; say nothing of the bewildering array of extensions built around, on top of, and in between these amazing packages.1\nGiven the wealth of options, it is perhaps understandable that even avid R users can overlook the base R graphics system. This is unfortunate, because base R offers very powerful and flexible plotting facilities.2 The downside of this power and flexibility is that base R plotting can require a lot of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic plot() function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.\nThe tinyplot package aims to remove this overhead. It provides a lightweight extension of the base R graphics system that preserves the same core logic and syntax, but with numerous convenience features to make base R plotting a more user-friendly experience. For example, the core tinyplot() function—or its shorthand alias plt()—makes it easy to plot grouped datasets and generate automatic legends in a single function call. Or, you can display groups in separate facets without having to worry about manually setting plot regions. While tinyplot offers these and various other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plotting function. Users should generally be able to swap out a valid plot() call for tinyplot()/plt() without any changes to the expected output.\nIt is worth emphasizing that tinyplot requires only base R. It has zero recursive dependencies and we have been careful to keep its installation size down to a minimum. tinyplot should thus provide an attractive and lightweight option for package developers (or regular R users!) who would like to produce convenient and sophisticated plots, combined with a minimal footprint.\n\n\n\nThe tinyplot website includes a detailed introductory tutorial, with numerous examples. But here are some quickstart examples of the package in action.\n\nlibrary(tinyplot)\n\nGrouped scatterplot with automatic legend:\n\n# with(iris, tinyplot(x = Petal.Length, y = Sepal.Length, by = Species)) # atomic\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris)             # formula\n\n\n\n\n\n\n\n\nIf you would prefer to save on a few keystrokes, you can use the shorthand plt() alias instead instead of typing out tinyplot() in full. Here’s the same plot with this shorthand alias, plus a few aesthetic tweaks:\n\nplt(\n  Sepal.Length ~ Petal.Length | Species, \n  data = iris,\n  palette = \"dark\", pch = 16,\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nGrouped grouped density plot with automatic legend:\n\nplt(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n\n\n\n\n\n\n\n\nGrouped scatterplot with (continuous) gradient legend, combined with facet layout:\n\nplt(\n  Sepal.Length ~ Petal.Length | Sepal.Length, data = iris,\n  facet = ~Species, facet.args = list(bg = \"grey90\"),\n  pch = 19,\n  main = \"Faceted Species!\",\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nHopefully, these have been enough to pique your interest. Head over to the intro tutorial for many more examples, including range plots and customization.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "tinyplot ",
    "section": "",
    "text": "A lightweight extension of the base R graphics system, with support for automatic grouping, legends, facets, and various other enhancements.\nThe stable version of tinyplot is available on CRAN.\ninstall.packages(\"tinyplot\")\nOr, you can grab the latest development version from R-universe.\ninstall.packages(\"tinyplot\", repos = \"https://grantmcdermott.r-universe.dev\")",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "tinyplot ",
    "section": "",
    "text": "R users are spoiled for choice when it comes to visualization frameworks. The options, of course, include lattice and ggplot2; say nothing of the bewildering array of extensions built around, on top of, and in between these amazing packages.1\nGiven the wealth of options, it is perhaps understandable that even avid R users can overlook the base R graphics system. This is unfortunate, because base R offers very powerful and flexible plotting facilities.2 The downside of this power and flexibility is that base R plotting can require a lot of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic plot() function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.\nThe tinyplot package aims to remove this overhead. It provides a lightweight extension of the base R graphics system that preserves the same core logic and syntax, but with numerous convenience features to make base R plotting a more user-friendly experience. For example, the core tinyplot() function—or its shorthand alias plt()—makes it easy to plot grouped datasets and generate automatic legends in a single function call. Or, you can display groups in separate facets without having to worry about manually setting plot regions. While tinyplot offers these and various other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plotting function. Users should generally be able to swap out a valid plot() call for tinyplot()/plt() without any changes to the expected output.\nIt is worth emphasizing that tinyplot requires only base R. It has zero recursive dependencies and we have been careful to keep its installation size down to a minimum. tinyplot should thus provide an attractive and lightweight option for package developers (or regular R users!) who would like to produce convenient and sophisticated plots, combined with a minimal footprint.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "tinyplot ",
    "section": "",
    "text": "The tinyplot website includes a detailed introductory tutorial, with numerous examples. But here are some quickstart examples of the package in action.\n\nlibrary(tinyplot)\n\nGrouped scatterplot with automatic legend:\n\n# with(iris, tinyplot(x = Petal.Length, y = Sepal.Length, by = Species)) # atomic\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris)             # formula\n\n\n\n\n\n\n\n\nIf you would prefer to save on a few keystrokes, you can use the shorthand plt() alias instead instead of typing out tinyplot() in full. Here’s the same plot with this shorthand alias, plus a few aesthetic tweaks:\n\nplt(\n  Sepal.Length ~ Petal.Length | Species, \n  data = iris,\n  palette = \"dark\", pch = 16,\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nGrouped grouped density plot with automatic legend:\n\nplt(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n\n\n\n\n\n\n\n\nGrouped scatterplot with (continuous) gradient legend, combined with facet layout:\n\nplt(\n  Sepal.Length ~ Petal.Length | Sepal.Length, data = iris,\n  facet = ~Species, facet.args = list(bg = \"grey90\"),\n  pch = 19,\n  main = \"Faceted Species!\",\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nHopefully, these have been enough to pique your interest. Head over to the intro tutorial for many more examples, including range plots and customization.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "tinyplot ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBoth lattice and ggplot2 are built on top of the grid package, which was incoporated into the base R distribution way back in R 2.0.0. ggplot2, in particular, is arguably the most important and influential (high-level) graphics library of the last two decades, across any programming language.↩︎\nJust type demo(graphics) or demo(persp) into your R console to get an idea. Or, take a look at these two excellent tutorials.↩︎",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html",
    "href": "vignettes/intro_tutorial.html",
    "title": "Tutorial",
    "section": "",
    "text": "The goal of this intro tutorial is to give you a sense of the main features and syntax of tinyplot, a lightweight extension of the base R graphics system. We don’t try to cover everything, but you should come away with a good understanding of how the package works and how it can integrate with your own projects.",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#preliminaries",
    "href": "vignettes/intro_tutorial.html#preliminaries",
    "title": "Tutorial",
    "section": "Preliminaries",
    "text": "Preliminaries\nStart by loading the package. For the examples in this tutorial, we’ll be using a slightly modified version of the airquality dataset that comes bundled with base R. So let’s go ahead and create that now too.\n\nlibrary(tinyplot)\n\naq = airquality\naq$Month = factor(month.abb[aq$Month], levels = month.abb[5:9])",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#equivalence-with-plot",
    "href": "vignettes/intro_tutorial.html#equivalence-with-plot",
    "title": "Tutorial",
    "section": "Equivalence with plot()",
    "text": "Equivalence with plot()\nAs far as possible, tinyplot tries to be a drop-in replacement for regular plot calls.\n\npar(mfrow = c(1, 2))\n\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\n\npar(mfrow = c(1, 1)) # reset layout\n\nSimilarly, we can plot elements from a data frame using either the atomic or formula methods. Here’s a simple example using the aq dataset that we created earlier.\n\n# with(aq,  tinyplot(Day, Temp)) # atomic method (same as below)\ntinyplot(Temp ~ Day, data = aq)  # formula method\n\n\n\n\n\n\n\n\n\nAside: plt shorthand\nIf you’d prefer to save on a few keystrokes, you can use the shorthand plt alias instead of typing out tinyplot.\n\nplt(Temp ~ Day, data = aq) # `plt` = shorthand alias for `tinyplot`\n\n\n\n\n\n\n\n\nPlease note that the plt shorthand would work for all of the remaining plot calls below. But we’ll stick to tinyplot to avoid any potential confusion.",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#grouped-data",
    "href": "vignettes/intro_tutorial.html#grouped-data",
    "title": "Tutorial",
    "section": "Grouped data",
    "text": "Grouped data\nWhere tinyplot starts to diverge from its base counterpart is with respect to grouped data. In particular, tinyplot allows you to characterize groups using the by argument.1\n\n# tinyplot(aq$Day, aq$Temp, by = aq$Month) # same as below\nwith(aq, tinyplot(Day, Temp, by = Month))\n\n\n\n\n\n\n\n\nAn arguably more convenient approach is to use the equivalent formula syntax. Just place the “by” grouping variable after a vertical bar (i.e., |).\n\ntinyplot(Temp ~ Day | Month, data = aq)\n\n\n\n\n\n\n\n\nYou can use standard base plotting arguments to adjust features of your plot. For example, change pch (plot character) to get filled points and cex (character expansion) to change their size.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n\nSimilarly, converting to a grouped line plot is a simple matter of adjusting the type argument.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n\nThe default behaviour of tinyplot is to represent groups through colour. However, note that we can automatically adjust pch and lty by groups too by passing the \"by\" convenience keyword. This can be used in conjunction with the default group colouring. Or, as a replacement for group colouring—an option that may be particularly useful for contexts where colour is expensive or prohibited (e.g., certain academic journals).\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  col = \"black\", # override automatic group colours\n  lty = \"by\"     # change line type by group instead\n)\n\n\n\n\n\n\n\n\nThe \"by\" convenience argument is also available for mapping group colours to background fill bg (alias fill). One use case is to override the grouped border colours for filled plot characters and instead pass them through the background fill.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 21,      # use filled circles\n  col = \"black\", # override automatic group (border) colours of points\n  fill = \"by\"    # use background fill by group instead\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#colours",
    "href": "vignettes/intro_tutorial.html#colours",
    "title": "Tutorial",
    "section": "Colours",
    "text": "Colours\nOn the subject of group colours, the default palette should adjust automatically depending on the class and cardinality of the grouping variable. For example, a sequential (“viridis”) palette will be used if an ordered factor is detected.\n\ntinyplot(\n  Temp ~ Day | ordered(Month), data = aq,\n  pch = 16\n)\n\n\n\n\n\n\n\n\nHowever, this behaviour is easily customized via the palette argument. The default set of discrete colours are inherited from the user’s current global palette. (Most likely the “R4” set of colors; see ?palette). However, all of the various palettes listed by palette.pals() and hcl.pals() are supported as convenience strings.2 Note that case-insensitive, partial matching for these convenience string is allowed. For example:\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  palette = \"tableau\" # or \"ggplot\", \"okabe\", \"set2\", \"harmonic\", etc.\n)\n\n\n\n\n\n\n\n\nBeyond these convenience strings, users can also supply a valid palette-generating function for finer control and additional options.3 You can also use the alpha argument to adjust the (alpha) transparency of your colours:\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 19, cex = 2,\n  palette = \"tableau\",\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n\nTo underscore what we said earlier, colours are inherited from the user’s current palette. So these can also be set globally, just as they can for the base plot function. The next code chunk will set a new default palette for the remainder of the plots that follow.\n\n# Set the default palette globally via the generic palette function\npalette(\"tableau\")",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#legend",
    "href": "vignettes/intro_tutorial.html#legend",
    "title": "Tutorial",
    "section": "Legend",
    "text": "Legend\nIn all of the preceding plots, you will have noticed that we get an automatic legend. The legend position and look can be customized with the legend argument. At a minimum, you can pass the familiar legend position keywords as a convenience string (“topright”, “bottom”, “left”, etc.). Moreover, a key feature of tinyplot is that we can easily and elegantly place the legend outside the plot area by adding a trailing “!” to these keywords. (As you may have realised, the default legend position is “right!”.) Let’s demonstrate by moving the legend to the left of the plot:\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  legend = \"left!\"\n)\n\n\n\n\n\n\n\n\nBeyond the convenience of these positional keywords, the legend argument also permits additional customization by passing an appropriate function (or, a list of arguments that will be passed on to the standard legend() function internally.) So you can change or turn off the legend title, remove the bounding box, switch the direction of the legend text to horizontal, etc. Here’s a grouped density plot example, where we also add some shading by specifying that the background colour should vary by groups too.\n\nwith(\n  aq,\n  tinyplot(\n    Temp,\n    by = Month,\n    type = \"density\",\n    fill = \"by\",                         # add fill by groups\n    grid = TRUE,                         # add background grid\n    legend = list(\"topright\", bty = \"o\") # change legend features\n  )\n)\n\n\n\n\n\n\n\n\nAll of the legend examples that we have seen thus far are representations of discrete groups. However, please note that tinyplot also supports grouping by continuous variables, which automatically yield gradient legends.\n\ntinyplot(Temp ~ Wind | Ozone, data = aq, pch = 19)\n\n\n\n\n\n\n\n\nGradient legends (and plots) can be customized in an identical manner to discrete legends by adjusting the keyword positioning, palette choice, alpha transparency etc. Here is a quick adaptation of the previous plot to demonstrate. Note that here we pass a special convenience argument to bg/fill; if it detects a numeric in the range of [0,1], then it automatically inherits the grouped colour mappings but with added transparency.\n\ntinyplot(\n  Temp ~ Wind | Ozone, data = aq,\n  pch  = 21,      # use filled plot character\n  cex  = 2,\n  col  = \"black\", # override automatic (grouped) border colour of points\n  fill = 0.5,     # use background fill instead with added alpha transparency \n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#more-plot-types",
    "href": "vignettes/intro_tutorial.html#more-plot-types",
    "title": "Tutorial",
    "section": "More plot types",
    "text": "More plot types\nWe have already seen several plot types above such as \"p\" (points), \"l\" (lines), and \"density\". In general, tinyplot supports all of the primitive plot types/elements available in base R, as well as a number of additional plot types that can be a bit tedious to code up manually. The full list of supported plot types can be viewed in this pinned GitHub issue, or by checking the ?tinyplot documentation.\nFor example, tinyplot support interval plots via the \"pointrange\", \"errorbar\", \"ribbon\" type arguments. A canonical use-case is regression analysis and prediction.\n\nmod = lm(Temp ~ 0 + Month / Day, data = aq)\naq = cbind(aq, predict(mod, interval = \"confidence\"))\n\nwith(\n  aq,\n  tinyplot(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    by = Month,\n    type = \"ribbon\",\n    grid = TRUE,\n    main = \"Model predictions\"\n  )\n)\n\n\n\n\n\n\n\n\nSimilarly, we can grab the model estimates to produce nice coefficient plots.\n\n# grab coefs of interest\nmonthcoefs = data.frame(\n  gsub(\"Month\", \"\", names(coef(mod))),\n  coef(mod),\n  confint(mod)\n  ) |&gt;\n  setNames(c(\"term\", \"estimate\", \"ci_low\", \"ci_high\")) |&gt;\n  subset(!grepl(\"Day\", term))\n\n# plot\nwith(\n  monthcoefs,\n  tinyplot(\n    x = term, y = estimate,\n    ymin = ci_low, ymax = ci_high,\n    type = \"pointrange\", # or: \"errobar\", \"ribbon\"\n    pch = 19, col = \"dodgerblue\",\n    grid = TRUE,\n    main = \"Average Monthly Effect on Temperature\"\n  )\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#facets",
    "href": "vignettes/intro_tutorial.html#facets",
    "title": "Tutorial",
    "section": "Facets",
    "text": "Facets\nAlongside the standard “by” grouping approach that we have seen thus far, tinyplot also supports faceted plots. Mirroring the main tinyplot function, the facet argument accepts both atomic and formula methods.\n\nwith(\n  aq,\n  tinyplot(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    type = \"ribbon\",\n    facet = Month, ## &lt;= facet, not by\n    grid = TRUE,\n    main = \"Predicted air temperatures\"\n  )\n)\n\n\n\n\n\n\n\n\nBy default, facets will be arranged in a square configuration if more than three facets are detected. Users can override this behaviour by supplying nrow or ncol in the “facet.args” helper function. (The margin padding between individual facets can also be adjusted via the fmar argument.) Note that we can also reduce axis label redundancy by turning off the plot frame.\n\nwith(\n  aq,\n  tinyplot(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    type = \"ribbon\",\n    facet = Month,\n    facet.args = list(nrow = 1),\n    grid = TRUE, frame = FALSE,\n    main = \"Predicted air temperatures\"\n  )\n)\n\n\n\n\n\n\n\n\nHere’s a slightly fancier version where we combine facets with (by) colour grouping, add a background fill to the facet text, and also add back the original values to our model predictions. For this particular example, we’ll use the facet = \"by\" convenience shorthand to facet along the same month variable as the colour grouping. But you can easily specify different by and facet variables if that’s what your data support.\n\n# Plot the original points \nwith(\n  aq,\n  tinyplot(\n    x = Day, y = Temp,\n    by = Month,\n    facet = \"by\", facet.args = list(bg = \"grey90\"),\n    palette = \"dark2\",\n    grid = TRUE, frame = FALSE, ylim = c(50, 100),\n    main = \"Actual and predicted air temperatures\"\n  )\n)\n# Add the model predictions to the same plot \nwith(\n  aq,\n  tinyplot(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    by = Month, facet = \"by\",\n    type = \"ribbon\",\n    palette = \"dark2\",\n    add = TRUE\n  )\n)\n\n\n\n\n\n\n\n\nAgain, the facet argument also accepts a formula interface. One particular use case is for two-sided formulas, which arranges the facet layout in a fixed grid arrangement. Here’s a simple (if contrived) example.\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\n\ntinyplot(\n Temp ~ Day, data = aq,\n facet = windy ~ hot,\n # the rest of these arguments are optional...\n facet.args = list(col = \"white\", bg = \"black\"),\n pch = 16, col = \"dodgerblue\",\n grid = TRUE, frame = FALSE, ylim = c(50, 100),\n main = \"Daily temperatures vs. wind\"\n)\n\n\n\n\n\n\n\n\nThe facet.args customizations can also be set globally via the tpar() function, which provides a nice segue to our final section.",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#customization",
    "href": "vignettes/intro_tutorial.html#customization",
    "title": "Tutorial",
    "section": "Customization",
    "text": "Customization\nCustomizing your plots further is straightforward, whether that is done directly by changing tinyplot arguments for a single plot, or by setting global parameters. For setting global parameters, users can invoke the standard par() arguments. But for improved convenience and integration with the rest of the package, we recommend that users instead go via tpar(), which is an extended version of par() that supports all of the latter’s parameters plus some tinyplot-specific ones. Here’s a quick penultimate example, where we impose several global changes (e.g., rotated axis labels, removed plot frame to get Tufte-style floating axes, etc.) before drawing the plot. change our point character, tick labels, and font family globally, before adding some transparency to our colour palette, and use Tufte-style floating axes with a background panel grid.\n\nop = tpar(\n  bty    = \"n\",           # No box (frame) around the plot \n  family = \"HersheySans\", # Use R's Hershey font instead of Arial default\n  grid   = TRUE,          # Add a background grid\n  las    = 1,             # Horizontal axis tick labels\n  pch    = 16             # Filled points as default\n)\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"b\",\n  alpha = 0.5,\n  main = \"Daily temperatures by month\"\n)\n\n\n\n\n\n\n\n\nNote: For access to a much wider variety of fonts, you might consider the showtext package (link).\nAt the risk of repeating ourselves, the use of (t)par in the previous example again underscores the correspondence with the base graphics system. Because tinyplot is effectively a convenience wrapper around base plot, any global elements that you have set for the latter should carry over to the former. For nice out-of-the-box themes, we recommend the basetheme package (link).\n\ntpar(op) # revert global changes from above\n\nlibrary(basetheme)\nbasetheme(\"royal\") # or \"clean\", \"dark\", \"ink\", \"brutal\", etc.\n\ntpar(pch = 15) # filled squares as first pch type\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"b\",\n  pch = \"by\",\n  palette = \"tropic\",\n  main = \"Daily temperatures by month\"\n)\n\n\n\n\n\n\n\n\nbasetheme(NULL)  # back to default theme\ndev.off()\n#&gt; null device \n#&gt;           1",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#saving-plots",
    "href": "vignettes/intro_tutorial.html#saving-plots",
    "title": "Tutorial",
    "section": "Saving plots",
    "text": "Saving plots\nA final point to note is that tinyplot offers convenience features for exporting plots to disk. Simply invoke the file argument to specify the relevant file path (including the extension type). You can customize the output dimensions (in inches) via the accompanying width and height arguments.4\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  file = \"aq.png\", width = 8, height = 5\n)\n\n# optional: delete the saved plot\nunlink(\"aq.png\")\n\nAlongside convenience, the benefit of this native tinyplot approach (versus the traditional approach of manually opening an external graphics device, e.g. png()) is that all of your current graphic settings are automatically carried over to the exported file. Feel free to try yourself by setting some global graphics parameters via tpar() and then using file to save a plot.",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#conclusion",
    "href": "vignettes/intro_tutorial.html#conclusion",
    "title": "Tutorial",
    "section": "Conclusion",
    "text": "Conclusion\nIn summary, consider the tinyplot package if you are looking for base R plot functionality with added convenience features. You can use (nearly) the exact same syntax and all of your theme elements should carry over too. It has no dependencies other than base R itself and this should make it an attractive option for package developers, as well as situations where dependency management is expensive (e.g., production pipelines, continuous integration or an R application running in a browser via WebAssembly).",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#footnotes",
    "href": "vignettes/intro_tutorial.html#footnotes",
    "title": "Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAt this point, experienced base plot users might protest that you can colour by groups using the col argument, e.g. with(aq, plot(Day, Temp, col = Month)). This is true, but there are several limitations. First, you don’t get an automatic legend. Second, the base plot.formula method doesn’t specify the grouping within the formula itself (not a deal-breaker, but not particularly consistent either). Third, and perhaps most importantly, this grouping doesn’t carry over to line plots (i.e., type=“l”). Instead, you have to transpose your data and use matplot. See this old StackOverflow thread for a longer discussion.↩︎\nSee the accompanying help pages of those two functions for more details on the available palettes, or read Zeileis & Murrell (2023, The R Journal, doi:10.32614/RJ-2023-071).↩︎\nFor example, if you have installed the ggsci package (link) then you could use palette = ggsci::pal_npg() to generate a palette consistent with those used by the Nature Publishing Group.↩︎\nThe default dimensions are 7x7, with a resolution of 300 DPI. However, these too can be customized via the file.width, file.height, and file.res parameters in tpar().↩︎",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "News",
    "section": "",
    "text": "If you are viewing this file on CRAN, please check the latest NEWS on our website where the formatting is also better.\n\n\nBug fixes:\n\nBetter preserve facet attributes, thus avoiding misarrangement of facet grids for density and histogram types. (#209 @zeileis)\nRespect xlim and ylim when explicitly supplied by the user. (thanks to @mclements for code submission #221)\n\nInternals:\n\nContinued modularization/abstraction of the code logic. (#214 @vincentarelbundock)\n\nMisc:\n\nDocumentation improvements, e.g. explicit guidance on how to specify multiple grouping variables (thanks to @strengjacke for reporting #213).\n\n\n\n\nNew Features:\n\nThe axes argument of tinyplot()/plt() gains extra options for fine-grained control of the plot axes. In addition to the existing logical (TRUE/FALSE) option, users can now specify one of the following character keywords (or, just their first letters as a convenient shorthand):\n\n\"standard\" (with axis, ticks, and labels; equivalent to TRUE),\n\"none\" (no axes; equivalent to FALSE),\n\"ticks\" (only ticks and labels without axis line),\n\"labels\" (only labels without ticks and axis line),\n\"axis\" (only axis line and labels but no ticks).\n\nSimultaneously, the main plotting functions also gain the xaxt and yaxt for separately controlling the two axes using the same keyword options. For example, plt(0:10, xaxt = \"l\", yaxt = \"t\") will yield a plot where the x-axis only contains labels and the y-axis contains both labels and ticks, but no axis line. (#190 @zeileis)\nSupport additional boxplot arguments like varwidth, notch, etc. Note that tinyplot(..., type = \"boxplot\", boxwidth = &lt;num&gt;) is equivalent to the boxplot(..., width = &lt;num&gt;); we just use the “box(width)” prefix to avoid conflicting with the existing tinyplot(..., width) argument. (#196 @grantmcdermott)\n\nBug fixes:\n\nFix duplicate plots produced with type = \"density\", which was a regression accidentally introduced in v0.2.0 (#187 @grantmcdermott)\nEnsure correct boxplot positioning if x == by, or these two are functionally identical. (#196 @grantmcdermott)\nxlab and ylab arguments not respected in some plots. Thanks to @lbelzile for reporting Issue #203.\nAvoid triggering an inadvertent legend when a function transformation of x is plotted against x itself, tinyplot(log(x) ~ x). (#197 @zeileis)\nFacets with interactions and/or multivariate formulas (e.g., complex grid arrangements like tinyplot(mpg ~ wt, data = mtcars, facet = am + vs ~ gear)) now plot all panels correctly, even if some combinations are missing. (#197 @grantmcdermott)\nFix alignment of facet titles when axes are logged. (#207 @grantmcdermott)\n\nInternals:\n\nContinued modularization of the main code logic. (#192 & #198 @vincentarelbundock)\nRevamped formula processing that allows for better sanity checking and edge-case logic. (#197 @zeileis)\n\n\n\n\nNew features:\n\nSupport for additional plot types:\n\ntype = \"n\", i.e. empty plot. Since type = \"n\" implicitly assumes points, which limits the type of legend that can be drawn alongside the empty plot, we have also added a companion empty argument that can be used alongside any plot type. (#157, #167 @grantmcdermott)\ntype = \"boxplot\". Simultaneously enables plt(numeric ~ factor) support, first raised in #2, so that a boxplot is automatically plotted if a numeric is plotted against a factor. (#154 @grantmcdermott)\ntype = \"polypath\". (#159 @grantmcdermott)\ntype = \"rect\". (#161 @grantmcdermott)\ntype = \"segments\". (#163 @grantmcdermott)\ntype = \"histogram\" (alias type = \"hist\"). (#164 @grantmcdermott)\ntype = \"jitter\" (alias type = \"j\"). (#170 @grantmcdermott)\n\n\nInternals:\n\nThe main codebase has been significantly refactored (modularized), which should simplify future maintenance and enable better user-level error messages (#171, #173 @vincentarelbundock)\n\nMisc:\n\nVarious documentation improvements.\n\n\n\n\nOur first CRAN submission! This v0.1.0 release includes the following new features and updates:\nLicense:\n\nFormally switch to Apache 2.0 license. (#141 @grantmcdermott)\n\nBreaking changes:\n\nTo ensure consistent “dot.case” style for all tinyplot() function arguments, the following two arguments have been renamed (old =&gt; new):\n\npar_restore =&gt; restore.par (note the change in word order too!)\nribbon_alpha =&gt; ribbon.alpha\n\nWe don’t believe that these two arguments are much used in practice. So hopefully it will only have a negligible effect on existing tinyplot code in the wild, even though it is a breaking change. (#149 @grantmcdermott)\n\nNew features:\n\nGradient legends are now supported if a continuous variable is passed to by. Thanks to @zeileis for detailed feedback and advice around the default palette choice (a restricted version of the “viridis” palette), as well as StackOverflow user mnel, whose answer here provided the inspiration for the final implementation. (#122 @grantmcdermott)\nOrdered factors now inherit a discrete sequential color palette (“viridis”) by default. Thanks to @zeileis for the suggestion. (#130 @grantmcdermott)\nSupport user-supplied polygons. (#127 @grantmcdermott)\nSupport for the lwd argument for adjusting line widths. Similar to pch, lty, etc. this arguments also accepts a “by” convenience keyword to automatically vary line widths by group. (#134 @grantmcdermott)\ntpar() now accepts standard par() arguments in addition to the tinyplot-specific ones. This allows users to set or query graphical parameters via a single convenience function, instead having to invoke tpar and par separately. (#140 @grantmcdermott)\n\nAs an aside, tpar() has gained some additional parameters for fine-grained control of global plot defaults, including grid, ribbon.alpha, and various file.* parameters (see next bullet point).\n\nUsers can write plots directly to disk using the new file argument, alongside corresponding width and height arguments for output customization (both of which are defined in inches). For example, tinyplot(..., file = \"~/myplot.png\", width = 8, height = 5). This implementation relies on a simple internal wrapper around the traditional R external graphics devices like png(), pdf(), etc. But it may prove more convenient, since the current global graphics parameters held in (t)par() are carried over to the external device too and don’t need to be reset. Note that the appropriate device type is determined automatically by the file extension, which must be one of “.png”, “.jpg” (“.jpeg”), “.pdf”, or “.svg”. (#143 @grantmcdermott)\nWe have a shiny new tinyplot logo. (#148 @grantmcdermott)\nThe new get_saved_par() function can be used to retrieve the par settings from immediately before or immediately after the preceding tinyplot call. This function replaces some older (non-exported) internal functions that tinyplot was using to restore and control par environments. But it could also prove help to end users who are looking for additional ways to restore par settings after the fact. See ?get_saved_par for some examples. (#152 @grantmcdermott)\ntinyplot/plt gaina a new alpha = &lt;numeric[0,1]&gt; convenience argument for adding transparency to plot elements and colours. Example use: plt(rnorm(1e3), pch = 19, alpha = 0.3). (#129 @grantmcdermott)\nSimilar to the preceding news item, transparency can be added to (grouped) background fill by passing bg (or its alias, fill) a numeric in the range [0,1]. This feature has the same effect as bg = \"by\" except for the added transparency. Example use: plt(lat ~ long | depth, data = quakes, pch = 21, cex = 2, bg = 0.2). (#129 @grantmcdermott)\n\nBug fixes:\n\nFixed bug that prevented tpar(facet.x = ...) args from being passed forward and set correctly. (#137 @grantmcdermott)\nFixed bug where custom legends weren’t working with type = \"density\". (#147 @grantmcdermott)\n\nInternals:\n\nWe no longer ship the vignette(s) with the built package. This helps to reduce the size of the installation tarball and also avoids some redundancy with the actual help documentation (since many of the examples are the same). Note that the vignettes are all still rendered and available online at the tinyplot website. (#135 @grantmcdermott)\nSimilarly, we anticipate skipping tests on CRAN since the large suite of test snapshots (images) held in inst/tinytest is pushing the install tarball over CRAN’s recommended 5 MB limit. Please note that local testing of the package requires adding the NOT_CRAN=TRUE environment variable to your .Renviron file (or, exporting it in your .bashrc/.zshrc/etc. dotfile if you prefer that approach). (#145 @vincentarelbundock & @grantmcdermott)\nUpdate some test snapshots to match slight changes in the way that R 4.4.0 calculates density grid coords. (#150 @grantmcdermott)\n\n\n\n\nIMPORTANT BREAKING CHANGE:\nThe package has been renamed to tinyplot. (#22 @grantmcdermott)\nThis package renaming also incorporates the following function changes:\n\nplot2() is replaced by tinyplot() (or its shorthand alias plt()).\npar2() is replaced by tpar().\n\nSo, where you used to write…\nlibrary(plot2)\nplot2(Sepal.Length ~ Petal.Length | Species, iris)\n… you should now write:\nlibrary(tinyplot)\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Or, use the equivalent shorthand `plt` alias\nplt(Sepal.Length ~ Petal.Length | Species, iris)\nThe package URLs have been updated accordingly:\n\nGitHub: https://github.com/grantmcdermott/tinyplot\nWebsite: https://grantmcdermott.com/tinyplot\nR-universe: https://grantmcdermott.r-universe.dev/tinyplot\n\nMany thanks to everyone who provided thoughtful feedback about this prospective name change, especially @zeileis and @vincentarelbundock for kicking off the discussion, as well as the 100+ participants who voted in the social media poll.\nFor more details about the rational underlying this renaming decision, please see the following GitHub comment, as well as the discussion that preceded it: https://github.com/grantmcdermott/plot2/issues/22#issuecomment-1928472754\n\n\n\nWebsite:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the “by” convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g. plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for “area” type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g. plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn’t specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn’t auto-expanding correctly for area plots. (#92 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from “Okabe-Ito” to “R4”. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) “c”, “h”, “s”, and “S” types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a “by” convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (“!”) placement support for remaining legend keywords, e.g. “top!”, “left!”, “topright!”, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g. palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nLegend defaults have been changed. The default position is now “right!” and drawn without a border, i.e. bty = “n” (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. 🎉\n\n\n\n\n\nInitial release on GitHub.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#dev-version",
    "href": "NEWS.html#dev-version",
    "title": "News",
    "section": "",
    "text": "Bug fixes:\n\nBetter preserve facet attributes, thus avoiding misarrangement of facet grids for density and histogram types. (#209 @zeileis)\nRespect xlim and ylim when explicitly supplied by the user. (thanks to @mclements for code submission #221)\n\nInternals:\n\nContinued modularization/abstraction of the code logic. (#214 @vincentarelbundock)\n\nMisc:\n\nDocumentation improvements, e.g. explicit guidance on how to specify multiple grouping variables (thanks to @strengjacke for reporting #213).",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section",
    "href": "NEWS.html#section",
    "title": "News",
    "section": "",
    "text": "New Features:\n\nThe axes argument of tinyplot()/plt() gains extra options for fine-grained control of the plot axes. In addition to the existing logical (TRUE/FALSE) option, users can now specify one of the following character keywords (or, just their first letters as a convenient shorthand):\n\n\"standard\" (with axis, ticks, and labels; equivalent to TRUE),\n\"none\" (no axes; equivalent to FALSE),\n\"ticks\" (only ticks and labels without axis line),\n\"labels\" (only labels without ticks and axis line),\n\"axis\" (only axis line and labels but no ticks).\n\nSimultaneously, the main plotting functions also gain the xaxt and yaxt for separately controlling the two axes using the same keyword options. For example, plt(0:10, xaxt = \"l\", yaxt = \"t\") will yield a plot where the x-axis only contains labels and the y-axis contains both labels and ticks, but no axis line. (#190 @zeileis)\nSupport additional boxplot arguments like varwidth, notch, etc. Note that tinyplot(..., type = \"boxplot\", boxwidth = &lt;num&gt;) is equivalent to the boxplot(..., width = &lt;num&gt;); we just use the “box(width)” prefix to avoid conflicting with the existing tinyplot(..., width) argument. (#196 @grantmcdermott)\n\nBug fixes:\n\nFix duplicate plots produced with type = \"density\", which was a regression accidentally introduced in v0.2.0 (#187 @grantmcdermott)\nEnsure correct boxplot positioning if x == by, or these two are functionally identical. (#196 @grantmcdermott)\nxlab and ylab arguments not respected in some plots. Thanks to @lbelzile for reporting Issue #203.\nAvoid triggering an inadvertent legend when a function transformation of x is plotted against x itself, tinyplot(log(x) ~ x). (#197 @zeileis)\nFacets with interactions and/or multivariate formulas (e.g., complex grid arrangements like tinyplot(mpg ~ wt, data = mtcars, facet = am + vs ~ gear)) now plot all panels correctly, even if some combinations are missing. (#197 @grantmcdermott)\nFix alignment of facet titles when axes are logged. (#207 @grantmcdermott)\n\nInternals:\n\nContinued modularization of the main code logic. (#192 & #198 @vincentarelbundock)\nRevamped formula processing that allows for better sanity checking and edge-case logic. (#197 @zeileis)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-1",
    "href": "NEWS.html#section-1",
    "title": "News",
    "section": "",
    "text": "New features:\n\nSupport for additional plot types:\n\ntype = \"n\", i.e. empty plot. Since type = \"n\" implicitly assumes points, which limits the type of legend that can be drawn alongside the empty plot, we have also added a companion empty argument that can be used alongside any plot type. (#157, #167 @grantmcdermott)\ntype = \"boxplot\". Simultaneously enables plt(numeric ~ factor) support, first raised in #2, so that a boxplot is automatically plotted if a numeric is plotted against a factor. (#154 @grantmcdermott)\ntype = \"polypath\". (#159 @grantmcdermott)\ntype = \"rect\". (#161 @grantmcdermott)\ntype = \"segments\". (#163 @grantmcdermott)\ntype = \"histogram\" (alias type = \"hist\"). (#164 @grantmcdermott)\ntype = \"jitter\" (alias type = \"j\"). (#170 @grantmcdermott)\n\n\nInternals:\n\nThe main codebase has been significantly refactored (modularized), which should simplify future maintenance and enable better user-level error messages (#171, #173 @vincentarelbundock)\n\nMisc:\n\nVarious documentation improvements.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-2",
    "href": "NEWS.html#section-2",
    "title": "News",
    "section": "",
    "text": "Our first CRAN submission! This v0.1.0 release includes the following new features and updates:\nLicense:\n\nFormally switch to Apache 2.0 license. (#141 @grantmcdermott)\n\nBreaking changes:\n\nTo ensure consistent “dot.case” style for all tinyplot() function arguments, the following two arguments have been renamed (old =&gt; new):\n\npar_restore =&gt; restore.par (note the change in word order too!)\nribbon_alpha =&gt; ribbon.alpha\n\nWe don’t believe that these two arguments are much used in practice. So hopefully it will only have a negligible effect on existing tinyplot code in the wild, even though it is a breaking change. (#149 @grantmcdermott)\n\nNew features:\n\nGradient legends are now supported if a continuous variable is passed to by. Thanks to @zeileis for detailed feedback and advice around the default palette choice (a restricted version of the “viridis” palette), as well as StackOverflow user mnel, whose answer here provided the inspiration for the final implementation. (#122 @grantmcdermott)\nOrdered factors now inherit a discrete sequential color palette (“viridis”) by default. Thanks to @zeileis for the suggestion. (#130 @grantmcdermott)\nSupport user-supplied polygons. (#127 @grantmcdermott)\nSupport for the lwd argument for adjusting line widths. Similar to pch, lty, etc. this arguments also accepts a “by” convenience keyword to automatically vary line widths by group. (#134 @grantmcdermott)\ntpar() now accepts standard par() arguments in addition to the tinyplot-specific ones. This allows users to set or query graphical parameters via a single convenience function, instead having to invoke tpar and par separately. (#140 @grantmcdermott)\n\nAs an aside, tpar() has gained some additional parameters for fine-grained control of global plot defaults, including grid, ribbon.alpha, and various file.* parameters (see next bullet point).\n\nUsers can write plots directly to disk using the new file argument, alongside corresponding width and height arguments for output customization (both of which are defined in inches). For example, tinyplot(..., file = \"~/myplot.png\", width = 8, height = 5). This implementation relies on a simple internal wrapper around the traditional R external graphics devices like png(), pdf(), etc. But it may prove more convenient, since the current global graphics parameters held in (t)par() are carried over to the external device too and don’t need to be reset. Note that the appropriate device type is determined automatically by the file extension, which must be one of “.png”, “.jpg” (“.jpeg”), “.pdf”, or “.svg”. (#143 @grantmcdermott)\nWe have a shiny new tinyplot logo. (#148 @grantmcdermott)\nThe new get_saved_par() function can be used to retrieve the par settings from immediately before or immediately after the preceding tinyplot call. This function replaces some older (non-exported) internal functions that tinyplot was using to restore and control par environments. But it could also prove help to end users who are looking for additional ways to restore par settings after the fact. See ?get_saved_par for some examples. (#152 @grantmcdermott)\ntinyplot/plt gaina a new alpha = &lt;numeric[0,1]&gt; convenience argument for adding transparency to plot elements and colours. Example use: plt(rnorm(1e3), pch = 19, alpha = 0.3). (#129 @grantmcdermott)\nSimilar to the preceding news item, transparency can be added to (grouped) background fill by passing bg (or its alias, fill) a numeric in the range [0,1]. This feature has the same effect as bg = \"by\" except for the added transparency. Example use: plt(lat ~ long | depth, data = quakes, pch = 21, cex = 2, bg = 0.2). (#129 @grantmcdermott)\n\nBug fixes:\n\nFixed bug that prevented tpar(facet.x = ...) args from being passed forward and set correctly. (#137 @grantmcdermott)\nFixed bug where custom legends weren’t working with type = \"density\". (#147 @grantmcdermott)\n\nInternals:\n\nWe no longer ship the vignette(s) with the built package. This helps to reduce the size of the installation tarball and also avoids some redundancy with the actual help documentation (since many of the examples are the same). Note that the vignettes are all still rendered and available online at the tinyplot website. (#135 @grantmcdermott)\nSimilarly, we anticipate skipping tests on CRAN since the large suite of test snapshots (images) held in inst/tinytest is pushing the install tarball over CRAN’s recommended 5 MB limit. Please note that local testing of the package requires adding the NOT_CRAN=TRUE environment variable to your .Renviron file (or, exporting it in your .bashrc/.zshrc/etc. dotfile if you prefer that approach). (#145 @vincentarelbundock & @grantmcdermott)\nUpdate some test snapshots to match slight changes in the way that R 4.4.0 calculates density grid coords. (#150 @grantmcdermott)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-3",
    "href": "NEWS.html#section-3",
    "title": "News",
    "section": "",
    "text": "IMPORTANT BREAKING CHANGE:\nThe package has been renamed to tinyplot. (#22 @grantmcdermott)\nThis package renaming also incorporates the following function changes:\n\nplot2() is replaced by tinyplot() (or its shorthand alias plt()).\npar2() is replaced by tpar().\n\nSo, where you used to write…\nlibrary(plot2)\nplot2(Sepal.Length ~ Petal.Length | Species, iris)\n… you should now write:\nlibrary(tinyplot)\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Or, use the equivalent shorthand `plt` alias\nplt(Sepal.Length ~ Petal.Length | Species, iris)\nThe package URLs have been updated accordingly:\n\nGitHub: https://github.com/grantmcdermott/tinyplot\nWebsite: https://grantmcdermott.com/tinyplot\nR-universe: https://grantmcdermott.r-universe.dev/tinyplot\n\nMany thanks to everyone who provided thoughtful feedback about this prospective name change, especially @zeileis and @vincentarelbundock for kicking off the discussion, as well as the 100+ participants who voted in the social media poll.\nFor more details about the rational underlying this renaming decision, please see the following GitHub comment, as well as the discussion that preceded it: https://github.com/grantmcdermott/plot2/issues/22#issuecomment-1928472754",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-4",
    "href": "NEWS.html#section-4",
    "title": "News",
    "section": "",
    "text": "Website:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the “by” convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g. plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for “area” type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g. plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn’t specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn’t auto-expanding correctly for area plots. (#92 @grantmcdermott)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-5",
    "href": "NEWS.html#section-5",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from “Okabe-Ito” to “R4”. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) “c”, “h”, “s”, and “S” types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a “by” convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (“!”) placement support for remaining legend keywords, e.g. “top!”, “left!”, “topright!”, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g. palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-6",
    "href": "NEWS.html#section-6",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nLegend defaults have been changed. The default position is now “right!” and drawn without a border, i.e. bty = “n” (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. 🎉",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-7",
    "href": "NEWS.html#section-7",
    "title": "News",
    "section": "",
    "text": "Initial release on GitHub.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "vignettes/gallery.html",
    "href": "vignettes/gallery.html",
    "title": "Gallery",
    "section": "",
    "text": "WIP…",
    "crumbs": [
      "Gallery"
    ]
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‘tinyplot’ in publications use:\n\nMcDermott G, Arel-Bundock V, Zeileis A (2024). tinyplot: Lightweight Extension of the Base R Graphics System. R package version 0.2.1.99, https://grantmcdermott.com/tinyplot/.",
    "crumbs": [
      "Citation"
    ]
  },
  {
    "objectID": "man/get_saved_par.html",
    "href": "man/get_saved_par.html",
    "title": "tinyplot",
    "section": "",
    "text": "Convenience function for retrieving the graphical parameters (i.e., the full list of tag = value pairs held in par) from either immediately before or immediately after the most recent tinyplot call.\n\n\n\nget_saved_par(when = c(\"before\", \"after\"))\n\n\n\n\n\n\n\nwhen\n\n\ncharacter. From when should the saved parameters be retrieved? Either \"before\" (the default) or \"after\" the preceding tinyplot call.\n\n\n\n\n\n\nA potential side-effect of tinyplot is that it can change a user’s par settings. For example, it may adjust the inner and outer plot margins to make space for an automatic legend; see draw_legend. While it is possible to immediately restore the original par settings upon exit via the tinyplot(…, restore.par = TRUE) argument, this is not the default behaviour. The reason being that we need to preserve the adjusted parameter settings in case users want to add further graphical annotations to their plot (e.g., abline, text, etc.) Nevertheless, it may still prove desirable to recall and reset these original graphical parameters after the fact (e.g., once all these extra annotations have been added). That is the purpose of this get_saved_par function.\nOf course, users may prefer to manually capture and reset graphical parameters, as per the standard method described in the par documentation. For example:\n\nop = par(no.readonly = TRUE)  # save current par settings \n# &lt;do lots of (tiny)plotting&gt;\npar(op)                       # reset original pars\n\n\nThis standard manual approach may be safer than get_saved_par because it offers more precise control. Specifically, the value of get_saved_par itself will be reset after ever new tinyplot call; i.e. it may inherit an already-changed set of parameters. Users should bear these trade-offs in mind when deciding which approach to use. As a general rule, get_saved_par offers the convenience of resetting the original par settings even if a user forgot to save them beforehand. But one should avoid invoking it after a series of consecutive tinyplot calls.\nFinally, note that users can always call dev.off to reset all par settings to their defaults.\n\n\n\nA list of par settings.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n# Contrived example where we draw a grouped scatterplot with a legend and\n# manually add corresponding best fit lines for each group...\n#\n\n# First draw the grouped scatterplot\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Preserving adjusted par settings is good for adding elements to our plot\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# Get saved par from before the preceding tinyplot call (but don't use yet)\nsp = get_saved_par(\"before\")\n\n# Note the changed margins will affect regular plots too, which is probably\n# not desirable\nplot(1:10)\n\n\n\n\n\n\n\n# Reset the original parameters (could use `par(sp)` here)\ntpar(sp)\n# Redraw our simple plot with our corrected right margin\nplot(1:10)\n\n#\n# Quick example going the other way, \"correcting\" for par.restore = TRUE...\n#\n\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris, restore.par = TRUE)\n# Our added best lines will be wrong b/c of misaligned par\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s), lty = 2\n  )\n}\n# grab the par settings from the _end_ of the preceding tinyplot call to fix\ntpar(get_saved_par(\"after\"))\n# now the best lines are correct\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# reset again to original saved par settings before exit\ntpar(sp)",
    "crumbs": [
      "Reference",
      "get_saved_par"
    ]
  },
  {
    "objectID": "man/get_saved_par.html#retrieve-the-saved-graphical-parameters",
    "href": "man/get_saved_par.html#retrieve-the-saved-graphical-parameters",
    "title": "tinyplot",
    "section": "",
    "text": "Convenience function for retrieving the graphical parameters (i.e., the full list of tag = value pairs held in par) from either immediately before or immediately after the most recent tinyplot call.\n\n\n\nget_saved_par(when = c(\"before\", \"after\"))\n\n\n\n\n\n\n\nwhen\n\n\ncharacter. From when should the saved parameters be retrieved? Either \"before\" (the default) or \"after\" the preceding tinyplot call.\n\n\n\n\n\n\nA potential side-effect of tinyplot is that it can change a user’s par settings. For example, it may adjust the inner and outer plot margins to make space for an automatic legend; see draw_legend. While it is possible to immediately restore the original par settings upon exit via the tinyplot(…, restore.par = TRUE) argument, this is not the default behaviour. The reason being that we need to preserve the adjusted parameter settings in case users want to add further graphical annotations to their plot (e.g., abline, text, etc.) Nevertheless, it may still prove desirable to recall and reset these original graphical parameters after the fact (e.g., once all these extra annotations have been added). That is the purpose of this get_saved_par function.\nOf course, users may prefer to manually capture and reset graphical parameters, as per the standard method described in the par documentation. For example:\n\nop = par(no.readonly = TRUE)  # save current par settings \n# &lt;do lots of (tiny)plotting&gt;\npar(op)                       # reset original pars\n\n\nThis standard manual approach may be safer than get_saved_par because it offers more precise control. Specifically, the value of get_saved_par itself will be reset after ever new tinyplot call; i.e. it may inherit an already-changed set of parameters. Users should bear these trade-offs in mind when deciding which approach to use. As a general rule, get_saved_par offers the convenience of resetting the original par settings even if a user forgot to save them beforehand. But one should avoid invoking it after a series of consecutive tinyplot calls.\nFinally, note that users can always call dev.off to reset all par settings to their defaults.\n\n\n\nA list of par settings.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n# Contrived example where we draw a grouped scatterplot with a legend and\n# manually add corresponding best fit lines for each group...\n#\n\n# First draw the grouped scatterplot\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Preserving adjusted par settings is good for adding elements to our plot\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# Get saved par from before the preceding tinyplot call (but don't use yet)\nsp = get_saved_par(\"before\")\n\n# Note the changed margins will affect regular plots too, which is probably\n# not desirable\nplot(1:10)\n\n\n\n\n\n\n\n# Reset the original parameters (could use `par(sp)` here)\ntpar(sp)\n# Redraw our simple plot with our corrected right margin\nplot(1:10)\n\n#\n# Quick example going the other way, \"correcting\" for par.restore = TRUE...\n#\n\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris, restore.par = TRUE)\n# Our added best lines will be wrong b/c of misaligned par\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s), lty = 2\n  )\n}\n# grab the par settings from the _end_ of the preceding tinyplot call to fix\ntpar(get_saved_par(\"after\"))\n# now the best lines are correct\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# reset again to original saved par settings before exit\ntpar(sp)",
    "crumbs": [
      "Reference",
      "get_saved_par"
    ]
  },
  {
    "objectID": "man/draw_legend.html",
    "href": "man/draw_legend.html",
    "title": "tinyplot",
    "section": "",
    "text": "Internal function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend_args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  gradient = FALSE,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from tinyplot.\n\n\n\n\nlegend_args\n\n\nAdditional legend arguments to be passed to legend().\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = …).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from tinyplot.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from tinyplot.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from tinyplot.\n\n\n\n\nlwd\n\n\nPlotting line width(s), passed down from tinyplot.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from tinyplot.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from tinyplot.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from tinyplot.\n\n\n\n\ngradient\n\n\nLogical indicating whether a continuous gradient swatch should be used to represent the colors.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to tpar(“lmar”) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nLogical. Should we be calling plot.new internally?\n\n\n\n\n\n\nNo return value, called for side effect of producing a(n empty) plot with a legend in the margin.\n\n\n\n\nlibrary(\"tinyplot\")\n\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `tpar(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)\n\n# Continuous (gradient) legends are also supported\ndraw_legend(\n  legend = \"right!\",\n  legend_args = list(title = \"Key\"),\n  lgnd_labs = LETTERS[1:5],\n  col = hcl.colors(5),\n  gradient = TRUE ## enable gradient legend\n)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "draw_legend"
    ]
  },
  {
    "objectID": "man/draw_legend.html#calculate-placement-of-legend-and-draw-it",
    "href": "man/draw_legend.html#calculate-placement-of-legend-and-draw-it",
    "title": "tinyplot",
    "section": "",
    "text": "Internal function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend_args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  gradient = FALSE,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from tinyplot.\n\n\n\n\nlegend_args\n\n\nAdditional legend arguments to be passed to legend().\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = …).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from tinyplot.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from tinyplot.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from tinyplot.\n\n\n\n\nlwd\n\n\nPlotting line width(s), passed down from tinyplot.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from tinyplot.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from tinyplot.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from tinyplot.\n\n\n\n\ngradient\n\n\nLogical indicating whether a continuous gradient swatch should be used to represent the colors.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to tpar(“lmar”) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nLogical. Should we be calling plot.new internally?\n\n\n\n\n\n\nNo return value, called for side effect of producing a(n empty) plot with a legend in the margin.\n\n\n\n\nlibrary(\"tinyplot\")\n\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `tpar(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)\n\n# Continuous (gradient) legends are also supported\ndraw_legend(\n  legend = \"right!\",\n  legend_args = list(title = \"Key\"),\n  lgnd_labs = LETTERS[1:5],\n  col = hcl.colors(5),\n  gradient = TRUE ## enable gradient legend\n)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "draw_legend"
    ]
  }
]